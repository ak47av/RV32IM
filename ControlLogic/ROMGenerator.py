import csv

def generate_control_logic(input_csv, output_sv):
    input_size = 10
    output_size = 19
    
    with open(input_csv, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        with open(output_sv, "w") as out:
            # Write the header
            out.write("`timescale 1ns / 1ps\n\n")
            out.write("// DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING\n")
            out.write(f"module ControlLogic #(parameter IN={input_size}, parameter OUT={output_size}) (\n")
            out.write("    input logic [31:0] ins,\n")
            out.write("    output logic [1:0] storeSel,\n")
            out.write("    output logic [2:0] loadSel,\n")
            out.write("    output logic [3:0] branchControl,\n")
            out.write("    output logic [4:0] aluControl,\n")
            out.write("    output logic [2:0] immSel,\n")
            out.write("    output logic regwen,\n")
            out.write("    output logic bsel\n")
            out.write("    );\n\n")
            
            # Write the internal signals
            out.write("    logic [IN-1:0] index;       // input to the logic\n")
            out.write("    logic [OUT-1:0] control;    // output of the logic\n\n")
            
            # Write the instruction decode logic
            out.write("    // Decode instruction for these values\n")
            out.write("    logic bit30;\n")
            out.write("    logic bit25;\n")
            out.write("    logic [2:0]  funct3;\n")
            out.write("    logic [4:0]  opcode;\n\n")
            
            out.write("    assign bit30 = ins[30];\n")
            out.write("    assign bit25 = ins[25];\n")
            out.write("    assign funct3 = ins[14:12];\n")
            out.write("    assign opcode = ins[6:2];\n\n")
            
            out.write("    assign index = {bit30, bit25, funct3, opcode};\n\n")
            
            # Write the case statement
            out.write("    always_comb begin\n")
            out.write("        case(index)\n")
            
            # Write all the cases from CSV
            for row in reader:
                ibin = row['ibin']
                obin = row['obin']
                out.write(f"            {input_size}'b{ibin}: control = {output_size}'b{obin};\n")
            
            # Write the default case
            out.write(f"            default: control = {output_size}'b0000000000000010001;\n")
            out.write("        endcase\n")
            out.write("    end\n\n")
            
            # Write the output assignments
            out.write("    assign {storeSel, loadSel, branchControl, aluControl, regwen, immSel, bsel} = control;\n\n")
            
            # Close the module
            out.write("endmodule\n")

# Usage example:
generate_control_logic("control_rom.csv", "ControlLogic.sv")
